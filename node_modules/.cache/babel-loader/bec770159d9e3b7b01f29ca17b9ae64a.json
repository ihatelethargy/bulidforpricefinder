{"ast":null,"code":"var _jsxFileName = \"/Users/jjh/Desktop/opensource/openseafinder/src/context/opnseaContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { nft, nftFloor } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OpenseaContext = /*#__PURE__*/createContext();\n\nconst OpenseaContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [projectName, setProjectName] = useState(\"\");\n  const [nftData, setNftData] = useState({\n    status: \"idle\",\n    data: null\n  });\n  const [priceInfo, setPriceInfo] = useState({\n    status: \"idle\",\n    data: null\n  });\n\n  const getNftData = async () => {\n    let res = await nft();\n\n    try {\n      setNftData({\n        status: \"pending\",\n        data: null\n      });\n      setNftData({\n        status: \"resolved\",\n        data: res\n      });\n    } catch (e) {\n      setNftData({\n        status: \"rejected\",\n        data: null\n      });\n    }\n  };\n\n  const getPriceInfo = async projectName => {\n    let res = await nftFloor();\n\n    try {\n      setPriceInfo({\n        status: \"pending\",\n        data: null\n      });\n      setPriceInfo({\n        status: \"resolved\",\n        data: res\n      });\n    } catch (e) {\n      setPriceInfo({\n        status: \"rejected\",\n        data: null\n      });\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (projectName) {\n        getPriceInfo(projectName);\n      }\n\n      getNftData();\n      setLoading(false);\n    } catch (e) {\n      alert(e);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(OpenseaContext.Provider, {\n    value: {\n      loading,\n      nftData,\n      priceInfo,\n      setProjectName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OpenseaContextProvider, \"EVaE1L+KA8aAUPTMTO5pTBUmN6c=\");\n\n_c = OpenseaContextProvider;\nexport { OpenseaContextProvider, OpenseaContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenseaContextProvider\");","map":{"version":3,"sources":["/Users/jjh/Desktop/opensource/openseafinder/src/context/opnseaContext.js"],"names":["createContext","useEffect","useState","nft","nftFloor","OpenseaContext","OpenseaContextProvider","children","loading","setLoading","projectName","setProjectName","nftData","setNftData","status","data","priceInfo","setPriceInfo","getNftData","res","e","getPriceInfo","alert"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,YAA9B;;AAEA,MAAMC,cAAc,gBAAGL,aAAa,EAApC;;AAEA,MAAMM,sBAAsB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC;AACnCY,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,IAAI,EAAE;AAF6B,GAAD,CAAtC;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC;AACvCY,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,IAAI,EAAE;AAFiC,GAAD,CAA1C;;AAKA,QAAMG,UAAU,GAAG,YAAY;AAC3B,QAAIC,GAAG,GAAG,MAAMhB,GAAG,EAAnB;;AACA,QAAI;AACAU,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,SADD;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAV;AAIAF,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,UADD;AAEPC,QAAAA,IAAI,EAAEI;AAFC,OAAD,CAAV;AAIH,KATD,CASE,OAAOC,CAAP,EAAU;AACRP,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,UADD;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAV;AAIH;AACJ,GAjBD;;AAmBA,QAAMM,YAAY,GAAG,MAAOX,WAAP,IAAuB;AACxC,QAAIS,GAAG,GAAG,MAAMf,QAAQ,EAAxB;;AACA,QAAI;AACAa,MAAAA,YAAY,CAAC;AACTH,QAAAA,MAAM,EAAE,SADC;AAETC,QAAAA,IAAI,EAAE;AAFG,OAAD,CAAZ;AAIAE,MAAAA,YAAY,CAAC;AACTH,QAAAA,MAAM,EAAE,UADC;AAETC,QAAAA,IAAI,EAAEI;AAFG,OAAD,CAAZ;AAIH,KATD,CASE,OAAOC,CAAP,EAAU;AACRH,MAAAA,YAAY,CAAC;AACTH,QAAAA,MAAM,EAAE,UADC;AAETC,QAAAA,IAAI,EAAE;AAFG,OAAD,CAAZ;AAIH;AACJ,GAjBD;;AAmBAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI;AACA,UAAIS,WAAJ,EAAiB;AACbW,QAAAA,YAAY,CAACX,WAAD,CAAZ;AACH;;AACDQ,MAAAA,UAAU;AACVT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAND,CAME,OAAOW,CAAP,EAAU;AACRE,MAAAA,KAAK,CAACF,CAAD,CAAL;AACH;AACJ,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE;AACHZ,MAAAA,OADG;AAEHI,MAAAA,OAFG;AAGHI,MAAAA,SAHG;AAIHL,MAAAA;AAJG,KADX;AAAA,cAQKJ;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA5ED;;GAAMD,sB;;KAAAA,sB;AA8EN,SAASA,sBAAT,EAAiCD,cAAjC","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport { nft, nftFloor } from \"../api/api\";\n\nconst OpenseaContext = createContext();\n\nconst OpenseaContextProvider = ({ children }) => {\n    const [loading, setLoading] = useState(true);\n    const [projectName, setProjectName] = useState(\"\");\n\n    const [nftData, setNftData] = useState({\n        status: \"idle\",\n        data: null,\n    });\n\n    const [priceInfo, setPriceInfo] = useState({\n        status: \"idle\",\n        data: null,\n    });\n\n    const getNftData = async () => {\n        let res = await nft();\n        try {\n            setNftData({\n                status: \"pending\",\n                data: null,\n            });\n            setNftData({\n                status: \"resolved\",\n                data: res,\n            });\n        } catch (e) {\n            setNftData({\n                status: \"rejected\",\n                data: null,\n            });\n        }\n    };\n\n    const getPriceInfo = async (projectName) => {\n        let res = await nftFloor();\n        try {\n            setPriceInfo({\n                status: \"pending\",\n                data: null,\n            });\n            setPriceInfo({\n                status: \"resolved\",\n                data: res,\n            });\n        } catch (e) {\n            setPriceInfo({\n                status: \"rejected\",\n                data: null,\n            });\n        }\n    };\n\n    useEffect(() => {\n        try {\n            if (projectName) {\n                getPriceInfo(projectName);\n            }\n            getNftData();\n            setLoading(false);\n        } catch (e) {\n            alert(e);\n        }\n    }, []);\n\n    return (\n        <OpenseaContext.Provider\n            value={{\n                loading,\n                nftData,\n                priceInfo,\n                setProjectName,\n            }}\n        >\n            {children}\n        </OpenseaContext.Provider>\n    );\n};\n\nexport { OpenseaContextProvider, OpenseaContext };\n"]},"metadata":{},"sourceType":"module"}
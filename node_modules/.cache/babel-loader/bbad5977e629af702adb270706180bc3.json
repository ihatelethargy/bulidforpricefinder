{"ast":null,"code":"var _jsxFileName = \"/Users/jjh/Desktop/opensource/openseafinder/src/context/opnseaContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { nft } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OpenseaContext = /*#__PURE__*/createContext();\n\nconst OpenseaContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [nftData, setNftData] = useState({\n    status: \"idle\",\n    data: null\n  });\n\n  const getNftData = async () => {\n    let res = await nft();\n\n    try {\n      setNftData({\n        status: \"pending\",\n        data: null\n      });\n      setNftData({\n        status: \"resolved\",\n        data: res\n      });\n    } catch (e) {\n      setNftData({\n        status: \"rejected\",\n        data: null\n      });\n    }\n  };\n\n  useEffect(() => {\n    try {\n      getNftData();\n      setLoading(false);\n    } catch (e) {\n      alert(e);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(OpenseaContext.Provider, {\n    value: {\n      loading,\n      nftData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OpenseaContextProvider, \"AaOTjUhqUkmyy1Xk0OY6sgnQPyY=\");\n\n_c = OpenseaContextProvider;\nexport { OpenseaContextProvider, OpenseaContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenseaContextProvider\");","map":{"version":3,"sources":["/Users/jjh/Desktop/opensource/openseafinder/src/context/opnseaContext.js"],"names":["createContext","useEffect","useState","nft","OpenseaContext","OpenseaContextProvider","children","loading","setLoading","nftData","setNftData","status","data","getNftData","res","e","alert"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,GAAT,QAAoB,YAApB;;AAEA,MAAMC,cAAc,gBAAGJ,aAAa,EAApC;;AAEA,MAAMK,sBAAsB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC;AACnCS,IAAAA,MAAM,EAAE,MAD2B;AAEnCC,IAAAA,IAAI,EAAE;AAF6B,GAAD,CAAtC;;AAKA,QAAMC,UAAU,GAAG,YAAY;AAC3B,QAAIC,GAAG,GAAG,MAAMX,GAAG,EAAnB;;AACA,QAAI;AACAO,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,SADD;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAV;AAIAF,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,UADD;AAEPC,QAAAA,IAAI,EAAEE;AAFC,OAAD,CAAV;AAIH,KATD,CASE,OAAOC,CAAP,EAAU;AACRL,MAAAA,UAAU,CAAC;AACPC,QAAAA,MAAM,EAAE,UADD;AAEPC,QAAAA,IAAI,EAAE;AAFC,OAAD,CAAV;AAIH;AACJ,GAjBD;;AAmBAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI;AACAY,MAAAA,UAAU;AACVL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD,CAGE,OAAOO,CAAP,EAAU;AACRC,MAAAA,KAAK,CAACD,CAAD,CAAL;AACH;AACJ,GAPQ,EAON,EAPM,CAAT;AASA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE;AACHR,MAAAA,OADG;AAEHE,MAAAA;AAFG,KADX;AAAA,cAMKH;AANL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA9CD;;GAAMD,sB;;KAAAA,sB;AAgDN,SAASA,sBAAT,EAAiCD,cAAjC","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport { nft } from \"../api/api\";\n\nconst OpenseaContext = createContext();\n\nconst OpenseaContextProvider = ({ children }) => {\n    const [loading, setLoading] = useState(true);\n\n    const [nftData, setNftData] = useState({\n        status: \"idle\",\n        data: null,\n    });\n\n    const getNftData = async () => {\n        let res = await nft();\n        try {\n            setNftData({\n                status: \"pending\",\n                data: null,\n            });\n            setNftData({\n                status: \"resolved\",\n                data: res,\n            });\n        } catch (e) {\n            setNftData({\n                status: \"rejected\",\n                data: null,\n            });\n        }\n    };\n\n    useEffect(() => {\n        try {\n            getNftData();\n            setLoading(false);\n        } catch (e) {\n            alert(e);\n        }\n    }, []);\n\n    return (\n        <OpenseaContext.Provider\n            value={{\n                loading,\n                nftData,\n            }}\n        >\n            {children}\n        </OpenseaContext.Provider>\n    );\n};\n\nexport { OpenseaContextProvider, OpenseaContext };\n"]},"metadata":{},"sourceType":"module"}